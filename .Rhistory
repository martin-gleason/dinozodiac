matched_signs %>% select(sign_id)
url <- all_scopes$source %>%
str_extract(url_pattern) %>%
unique()
url_id <- length(url)
sources <- url %>%
tibble(url = .,
sourceid = seq(1:url_id)) %>%
select(sourceid, url)
sources
url <- all_scopes$source %>%
str_extract(url_site) %>%
unique()
url_id <- length(url)
sources <- url %>%
tibble(url = .,
sourceid = seq(1:url_id)) %>%
select(sourceid, url)
sources
all_scopes
all_scopes %>%
left_join(matched_signs, by = c("sign" = "greekname"))
all_scopes <- all_scopes %>%
left_join(matched_signs, by = c("sign" = "greekname"))
all_scopes %>%
mutate(source_site = str_extract(url_site))
all_scopes %>%
mutate(source_site = str_extract(sources, url_site))
all_scopes %>%
mutate(source_site = str_extract_all(sources, url_site))
all_scopes
all_scopes %>%
mutate(source_site = str_extract_all(source, url_site))
(source_site)
all_scopes %>%
mutate(source_site = str_extract(source, url_site)) %>%
select(source_site)
all_scopes %>%
mutate(source_site = str_extract(source, url_site)) %>%
select(source_site) %>%
left_join(sources, by = c("source_site" = "url"))
all_scopes %>%
mutate(source_site = str_extract(source, url_site)) %>%
select(source_site) %>%
left_join(sources, by = c("source_site" = "url"))
all_scopes %>%
mutate(source_site = str_extract(source, url_site)) %>%
left_join(sources, by = c("source_site" = "url"))
all_scopes %>%
mutate(source_site = str_extract(source, url_site)) %>%
left_join(sources, by = c("source_site" = "url")) %>%
select(sourceid, date, horoscope = scope, signid = sign_id)
all_scopes <- all_scopes %>%
mutate(source_site = str_extract(source, url_site)) %>%
left_join(sources, by = c("source_site" = "url")) %>%
select(sourceid, date, horoscope = scope, signid = sign_id)
dz <- config::get(file = 'connections/dinozodiac.yml')
#database
library(tidyverse)
library(config)
library(odbc)
library(DBI)
library(here)
dz <- config::get(file = 'connections/dinozodiac.yml')
con <- DBI::dbConnect(odbc::odbc(),
Driver = dz$dinozodiac$driver,
Servere = dz$dinozodiac$server,
UID = dz$dinozodiac$uid,
PWD = dz$dinozodiac$pwd,
Port = dz$dinozodiac$port,
Database = dz$dinozodiac$database
)
dbWriteTable(con, "signs", matched_signs, overwrite = TRUE)
dbWriteTable(con, "sources", sources, overwrite = TRUE)
dbWriteTable(con, "scopes", all_scopes, overwrite = TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/tidytextmodel.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/cleaning_db_prep.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/db_work.R', echo=TRUE)
#QA
today <- all_scopes %>%
filter(date == lubridate::today())
today
source('~/Local Dev Projects/dinozodiac/scripts/cleaning_db_prep.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/cleaning_db_prep.R', echo=TRUE)
all_scopes
?DBi
?DBI
all_scopes
test_scopes <- all_scopes %>%
mutate(scope_id = 1:nrow(scopes))
test_scopes <- all_scopes %>%
mutate(scope_id = 1:nrow(.))
test_scopes
test_scopes <- all_scopes %>%
mutate(scope_id = 1:nrow(.)) %>%
select(scope_id, sourceid, date, horoscope, signid)
dbWriteTable(con, "scopes", test_scopes, overwrite = TRUE)
#database
library(tidyverse)
library(config)
library(odbc)
library(DBI)
library(here)
dz <- config::get(file = 'connections/dinozodiac.yml')
con <- DBI::dbConnect(odbc::odbc(),
Driver = dz$dinozodiac$driver,
Servere = dz$dinozodiac$server,
UID = dz$dinozodiac$uid,
PWD = dz$dinozodiac$pwd,
Port = dz$dinozodiac$port,
Database = dz$dinozodiac$database
)
dbWriteTable(con, "scopes", test_scopes, overwrite = TRUE)
test_scopes <- all_scopes %>%
mutate(scope_id = 1:nrow(.)) %>%
select(scope_id, source = source_id, date, horoscope, sign = sign_id)
all_scopes
test_scopes <- all_scopes %>%
mutate(scope_id = 1:nrow(.)) %>%
select(scope_id, sourceid = source_id, date, horoscope, sign = sign_id)
test_scopes <- all_scopes %>%
mutate(scope_id = 1:nrow(.)) %>%
select(scope_id, source_id = sourceid, date, horoscope, sign_id =sign_id)
test_scopes <- all_scopes %>%
mutate(scope_id = 1:nrow(.)) %>%
select(scope_id, source_id = sourceid, date, horoscope, signid = sign_id)
test_scopes <- all_scopes %>%
mutate(scope_id = 1:nrow(.)) %>%
select(scope_id, source_id = sourceid, date, horoscope, sign_id = signid)
test_scopes
dbWriteTable(con, "scopes", test_scopes, overwrite = TRUE)
dbWriteTable(con, "sources", sources, overwrite = TRUE)
all_scopes <- all_scopes %>%
mutate(source_site = str_extract(source, url_site)) %>%
left_join(sources, by = c("source_site" = "url")) %>%
mutate(scope_id = 1:nrow(.)) %>%
select(scope_id, source_id = sourceid, date, horoscope, sign_id = signid)
all_scopes <- all_scopes %>%
mutate(source_site = str_extract(source, url_site)) %>%
left_join(sources, by = c("source_site" = "url")) %>%
mutate(scope_id = 1:nrow(.)) %>%
select(scope_id, source_id = sourceid, date, horoscope, sign_id = signid)
source('~/Local Dev Projects/dinozodiac/scripts/cleaning_db_prep.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/cleaning_db_prep.R', echo=TRUE)
all_scopes
source('~/Local Dev Projects/dinozodiac/scripts/cleaning_db_prep.R', echo=TRUE)
all_scopes
all_scopes <- all_scopes %>%
mutate(source_site = str_extract(source, url_site)) %>%
left_join(sources, by = c("source_site" = "url")) %>%
mutate(scope_id = 1:nrow(.)) %>%
select(scope_id, source_id = sourceid, date, scope, sign_id)
all_scopes
number <- dbGetQuery(con, "SELECT MAX(scope_id) FROM scopes;")
con <- DBI::dbConnect(odbc::odbc(),
Driver = dz$dinozodiac$driver,
Servere = dz$dinozodiac$server,
UID = dz$dinozodiac$uid,
PWD = dz$dinozodiac$pwd,
Port = dz$dinozodiac$port,
Database = dz$dinozodiac$database
)
dz <- config::get(file = 'connections/dinozodiac.yml')
con <- DBI::dbConnect(odbc::odbc(),
Driver = dz$dinozodiac$driver,
Servere = dz$dinozodiac$server,
UID = dz$dinozodiac$uid,
PWD = dz$dinozodiac$pwd,
Port = dz$dinozodiac$port,
Database = dz$dinozodiac$database
)
dbWriteTable(con, "signs", matched_signs, overwrite = TRUE)
number <- dbGetQuery(con, "SELECT MAX(scope_id) FROM scopes;")
number
create_sequence <- paste0("CREATE SEQUENCE scope_range MINVALUE", number, ";")
create_sequence
create_sequence <- paste0("CREATE SEQUENCE scope_range MINVALUE ", number, ";")
create_sequence
create_sequence <- paste0("CREATE SEQUENCE scope_range MINVALUE ", number+1, ";")
create_sequence
dbSendQuery(con, create_sequence)
dbSendQuery(con, create_sequence)
dbSendQuery(con, "DROP SEQUENCE scope_range;")
create_sequence <- paste0("CREATE SEQUENCE test MINVALUE ", number+1, ";")
dbSendQuery(con, create_sequence)
dbWriteTable(con, "scopes", test_scopes, overwrite = TRUE)
dbWriteTable(con, "scopes", all_scopes, overwrite = TRUE)
dbSendQuery(con, create_sequence)
number <- dbGetQuery(con, "SELECT MAX(scope_id) FROM scopes;")
number <- dbGetQuery(con, "SELECT MAX(scope_id) FROM scopes;")
create_sequence <- paste0("CREATE SEQUENCE test MINVALUE ", number+1, ";")
create_sequence <- paste0("CREATE SEQUENCE test MINVALUE ", number+1, ";")
dbSendQuery(con, create_sequence)
create_sequence <- paste0("CREATE SEQUENCE scope_range MINVALUE ", number+1, ";")
dbSendQuery(con, create_sequence)
dbWriteTable(con, "scopes", all_scopes, overwrite = TRUE)
number <- dbGetQuery(con, "SELECT MAX(scope_id) FROM scopes;")
create_sequence <- paste0("CREATE SEQUENCE scope_range MINVALUE ", number+1, ";")
dbSendQuery(con, c(create_sequence, set_new_default, set_seq_owner))
#CREATE SEQUENCE scope_range  MINVALUE 181;
set_new_default <- "ALTER TABLE scopes ALTER scopes_id SET DEFAULT nextval('scope_range');"
set_seq_owner <- "ALTER SEQUENCE scope_range OWNED BY scopes.scope_id;"
dbWriteTable(con, "scopes", all_scopes, overwrite = TRUE)
number <- dbGetQuery(con, "SELECT MAX(scope_id) FROM scopes;")
create_sequence <- paste0("CREATE SEQUENCE scope_range MINVALUE ", number+1, ";")
dbSendQuery(con, c(create_sequence, set_new_default, set_seq_owner))
dbSendQuery()
?dbSendQuery
dbSendQuery(con, create_sequence)
dbSendQuery(con,set_new_default)
dbSendQuery(con,set_seq_owner)
all_scopes
set_seq_owner <- "ALTER SEQUENCE scope_range OWNED BY scope.scope_id;"
dbSendQuery(con,set_new_default)
#CREATE SEQUENCE scope_range  MINVALUE 181;
set_new_default <- "ALTER TABLE scope ALTER scope_id SET DEFAULT nextval('scope_range');"
set_seq_owner <- "ALTER SEQUENCE scope_range OWNED BY scope.scope_id;"
dbSendQuery(con,set_new_default)
dbWriteTable(con, "scopes", all_scopes, overwrite = TRUE)
#CREATE SEQUENCE scope_range  MINVALUE 181;
set_new_default <- "ALTER TABLE scopes ALTER scope_id SET DEFAULT nextval('scope_range');"
set_seq_owner <- "ALTER SEQUENCE scope_range OWNED BY scopes.scope_id;"
dbSendQuery(con,set_new_default)
dbSendQuery(con, create_sequence)
dbSendQuery(con,set_new_default)
dbSendQuery(con,set_seq_owner)
dbDisconnect(con)
matched_signs
sources
sources
sources <- url %>%
tibble(url = .,
sourceid = seq(1:url_id)) %>%
select(source_id = sourceid, url)
all_scopes <- all_scopes %>%
mutate(source_site = str_extract(source, url_site)) %>%
left_join(sources, by = c("source_site" = "url")) %>%
mutate(scope_id = 1:nrow(.)) %>%
select(scope_id, source_id, date, scope, sign_id)
all_scopes <- all_scopes %>%
mutate(source_site = str_extract(source, url_site)) %>%
left_join(sources, by = c("source_site" = "url")) %>%
mutate(scope_id = 1:nrow(.)) %>%
select(scope_id, source_id, date, scope, sign_id)
all_scopes %>%
mutate(source_site = str_extract(source, url_site))
all_scopes
source('~/Local Dev Projects/dinozodiac/scripts/cleaning_db_prep.R', echo=TRUE)
all_scopes
sources
set_new_default <- "ALTER TABLE sources ALTER source_id SET DEFAULT nextval('source_range');"
create_source_sequence <- paste0("CREATE SEQUENCE source_range MINVALUE ", max_source_number+1, ";")
max_source_number <- dbGetQuery(con, "SELECT MAX(source_id) FROM sources;")
max_source_number <- dbGetQuery(con, "SELECT MAX(source_id) FROM sources;")
dz <- config::get(file = 'connections/dinozodiac.yml')
con <- DBI::dbConnect(odbc::odbc(),
Driver = dz$dinozodiac$driver,
Servere = dz$dinozodiac$server,
UID = dz$dinozodiac$uid,
PWD = dz$dinozodiac$pwd,
Port = dz$dinozodiac$port,
Database = dz$dinozodiac$database
)
max_source_number <- dbGetQuery(con, "SELECT MAX(source_id) FROM sources;")
dbWriteTable(con, "sources", sources, overwrite = TRUE)
max_source_number <- dbGetQuery(con, "SELECT MAX(source_id) FROM sources;")
set_source_seq_owner <- "ALTER SEQUENCE source_range OWNED BY sources.source_id;"
create_source_sequence <- paste0("CREATE SEQUENCE source_range MINVALUE ", max_source_number+1, ";")
set_new_source_default <- "ALTER TABLE sources ALTER source_id SET DEFAULT nextval('source_range');"
set_source_seq_owner <- "ALTER SEQUENCE source_range OWNED BY sources.source_id;"
dbSendQuery(con, create_source_sequence)
dbSendQuery(con, set_new_source_defaul)
dbSendQuery(con, set_new_source_default)
dbSendQuery(con, set_source_seq_owner)
dbWriteTable(con, "scopes", all_scopes, overwrite = TRUE)
#alter column to serial
number <- dbGetQuery(con, "SELECT MAX(scope_id) FROM scopes;")
create_sequence <- paste0("CREATE SEQUENCE scope_range MINVALUE ", number+1, ";")
set_new_default <- "ALTER TABLE scopes ALTER scope_id SET DEFAULT nextval('scope_range');"
set_seq_owner <- "ALTER SEQUENCE scope_range OWNED BY scopes.scope_id;"
dbSendQuery(con, create_sequence)
dbSendQuery(con,set_new_default)
dbSendQuery(con,set_seq_owner)
dbDisconnect(con)
max_source_number <- dbGetQuery(con, "SELECT MAX(source_id) FROM sources;")
dbWriteTable(con, "signs", matched_signs, overwrite = TRUE)
dz <- config::get(file = 'connections/dinozodiac.yml')
con <- DBI::dbConnect(odbc::odbc(),
Driver = dz$dinozodiac$driver,
Servere = dz$dinozodiac$server,
UID = dz$dinozodiac$uid,
PWD = dz$dinozodiac$pwd,
Port = dz$dinozodiac$port,
Database = dz$dinozodiac$database
)
max_source_number <- dbGetQuery(con, "SELECT MAX(source_id) FROM sources;")
max_source_number
source('~/Local Dev Projects/dinozodiac/scripts/cleaning_db_prep.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/db_work.R', echo=TRUE)
install.packages(c("callr", "devtools", "digest", "lattice", "plotly", "ps", "RcppArmadillo", "remotes", "stringi", "vctrs"))
source('~/Local Dev Projects/dinozodiac/scripts/tidytextmodel.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/cleaning_db_prep.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/db_work.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/scope_analysis.R')
matched_signs <- tibble(signs_cleaned, dino_signs) %>%
mutate(sign_id = 1:nrow(.)) %>%
select(sign_id, greekname = signs_cleaned, dinoname = dino_signs)
source('~/Local Dev Projects/dinozodiac/scripts/cleaning_db_prep.R', echo=TRUE)
matched_signs
View(matched_signs)
source('~/Local Dev Projects/dinozodiac/scripts/cleaning_db_prep.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/db_work.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/db_work.R', echo=TRUE)
dz <- config::get(file = 'connections/dinozodiac.yml')
dz <- config::get(file = 'connections/dinozodiac.yml')
dz <- config::get(file = 'connections/dinozodiac.yml')
con <- DBI::dbConnect(odbc::odbc(),
Driver = dz$dinozodiac$driver,
Servere = dz$dinozodiac$server,
UID = dz$dinozodiac$uid,
PWD = dz$dinozodiac$pwd,
Port = dz$dinozodiac$port,
Database = dz$dinozodiac$database
)
dbWriteTable(con, "signs", matched_signs, overwrite = TRUE)
dbSendQuery(con, "ALTER TABLE signs ADD PRIMARY KEY(sign_id);")
dbWriteTable(con, "sources", sources, overwrite = TRUE)
max_source_number <- dbGetQuery(con, "SELECT MAX(source_id) FROM sources;")
create_source_sequence <- paste0("CREATE SEQUENCE source_range MINVALUE ", max_source_number+1, ";")
set_new_source_default <- "ALTER TABLE sources ALTER source_id SET DEFAULT nextval('source_range');"
set_source_seq_owner <- "ALTER SEQUENCE source_range OWNED BY sources.source_id;"
dbSendQuery(con, create_source_sequence)
dbSendQuery(con, set_new_source_default)
dbSendQuery(con, set_source_seq_owner)
dbWriteTable(con, "scopes", all_scopes, overwrite = TRUE)
#alter column to serial
number <- dbGetQuery(con, "SELECT MAX(scope_id) FROM scopes;")
source('~/Local Dev Projects/dinozodiac/scripts/cleaning_db_prep.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/db_work.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/cleaning_db_prep.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/cleaning_db_prep.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/db_work.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/scope_analysis.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/scope_analysis.R', echo=TRUE)
library(tidyverse)
library(DBI)
library(odbc)
library(tidytext)
library(keras)
library(here)
library(tokenizers)
min_target <- 100000
preferred <- 1000000
dz <- config::get(file = 'connections/dinozodiac.yml')
con <- DBI::dbConnect(odbc::odbc(),
Driver = dz$dinozodiac$driver,
Servere = dz$dinozodiac$server,
UID = dz$dinozodiac$uid,
PWD = dz$dinozodiac$pwd,
Port = dz$dinozodiac$port,
Database = dz$dinozodiac$database
)
#creating tables signs and horoscopes aka scopes
signs <- dbReadTable(con, "signs")
#corpus of horoscopes
scopes <- dbReadTable(con, "scopes") %>%
select(scope) %>%
mutate(count = str_count(scope, "\\w+"),
char_count = nchar(scope))
#character corpus
scopes_corpus <- scopes %>%
select(scope) %>%
pull() %>%
str_c(collapse = " ") %>%
tokenize_characters(lowercase = FALSE,
strip_non_alphanum = FALSE,
simplify = TRUE)
print(sprintf("Corpus length: %d", length(scopes_corpus)))
averages <- scopes %>%
summarize(`avg words` = mean(count),
`fewest words` = min(count),
`most words` = max(count),
mean_char = mean(char_count),
min_char = min(char_count),
max_char = max(char_count))
length(scopes_corpus)/min_target
hscope_number <- min_target/averages$mean_char
per_sign <- hscope_number * 12
dino_scopes_full <- dbReadTable(con, "scopes") %>%
left_join(signs, by = c("sign_id" = "sign_id"))
#for analyzing horoscopes.com
dino_h <- dino_scopes_full %>%
filter(source_id == 1)
#for astrology.net
dino_astrology <- dino_scopes_full %>%
filter(source_id == 2)
#custom function for divvying up by sign
#next version use quo and !! to make more robust
by_sign <- function(df,...){
ds <- df %>% select(sign_id) %>%
unique() %>%
max()
list_of_signs <- vector(mode = "list", length = ds)
list_of_signs <- split(df, f = df$sign_id)
names(list_of_signs) <- df %>% select(greekname) %>%
unique() %>%
pull()
return(list_of_signs)
}
allscopes <- dino_scopes_full %>% by_sign()
bing <- get_sentiments("bing")
nrc <- get_sentiments("nrc")
nrc_sentiments <- nrc$sentiment %>% unique()
nrc_positive <- nrc %>%
filter(sentiment == "positive")
nrc_joy <- nrc %>%
filter(sentiment == "joy")
(stop_words)
(stop_words)
cancer_positive <-tidy_cancer %>%
inner_join(nrc_positive) %>%
count(word, sort = TRUE)
tidy_cancer <- allscopes$Cancer %>%
unnest_tokens(word, scope) %>%
select(date, dinoname, word) %>%
anti_join(stop_words)
cancer_positive <-tidy_cancer %>%
inner_join(nrc_positive) %>%
count(word, sort = TRUE)
cancer_joy <- tidy_cancer %>%
inner_join(nrc_joy) %>%
count(word, sort = TRUE)
scope_sentiment <- dino_scopes_full %>%
unnest_tokens(word, scope) %>%
select(date, dinoname, word) %>%
anti_join(stop_words) %>%
inner_join(bing) %>%
group_by(date)%>%
count(word, dinoname, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
scope_sentiment %>%
filter(sentiment == 5)
min(scope_sentiment$sentiment)
max(scope_sentiment$sentiment)
gg_scope <-scope_sentiment %>% ggplot(aes(x = date, y = sentiment, fill = dinoname)) +
geom_bar(stat = "identity", aes(alpha = .5)) +
facet_wrap(~dinoname)+
theme_minimal()
View(scope_sentiment %>% count(word, sort = TRUE))
ggsave("output/scope_sentiment_eda.png", gg_scope, width = 15, height = 8.5, units = "in")
source('~/Local Dev Projects/dinozodiac/scripts/scope_analysis.R', echo=TRUE)
gg_scope
cancer_positive <-tidy_cancer %>%
inner_join(nrc_positive) %>%
count(word, sort = TRUE)
cancer_joy
min(scope_sentiment$sentiment)
allscopes %>%
filter(sentiment == -3)
allscopes$Aries %>%
filter(sentiment == -3)
min_sentiment <- min(scope_sentiment$sentiment)
scope_sentiment %>%
filter(sentiment == min_sentiment)
scope_sentiment %>% ggplot(aes(x = date, y = sentiment, fill = dinoname)) +
geom_bar(stat = "identity", aes(alpha = .5)
theme_gray()
scope_sentiment %>% ggplot(aes(x = date, y = sentiment, fill = dinoname)) +
geom_bar(stat = "identity", aes(alpha = .5))
scope_sentiment %>% ggplot(aes(x = date, y = sentiment, fill = dinoname)) +
geom_bar(stat = "identity", aes(alpha = .5, position = "dodge"))
scope_sentiment %>% ggplot(aes(x = date, y = sentiment, fill = dinoname)) +
geom_bar(stat = "identity", aes(alpha = .5),  position = "dodge"))
scope_sentiment %>% ggplot(aes(x = date, y = sentiment, fill = dinoname)) +
geom_bar(stat = "identity", aes(alpha = .5),  position = "dodge")
source('~/Local Dev Projects/dinozodiac/scripts/scope_analysis.R')
source('~/Local Dev Projects/dinozodiac/scripts/scope_analysis.R')
source('~/Local Dev Projects/dinozodiac/scripts/tidytextmodel.R', echo=TRUE)
source('~/Local Dev Projects/dinozodiac/scripts/tidytextmodel.R', echo=TRUE)
#MODEL
create_model <- function(chars, max_length){
keras_model_sequential() %>%
layer_lstm(128, input_shape = c(max_length, length(chars))) %>%
layer_dense(length(chars)) %>%
layer_activation("softmax") %>%
compile(
loss = "categorical_crossentropy",
optimizer = optimizer_rmsprop(lr = 0.01)
)
}
iterate_model <- function(model, text, chars, max_lenght, diversity, vectors, iterations){
for(iteration in 1:iterations){
message(sprintf("iteration: %02d ---------------\n\n", iteration))
fit_model(model, vectors)
for(diversity in c(0.2, 0.5, 1)){
message(sprintf("diversity: %f ---------------\n\n", iteration))
current_phrase <- 1:10 %>%
map_chr(function(x) generate_phrase(model, text, chars, max_length, diverstiy))
message(current_phrase, sep = "\n")
message("\n\n")
}
}
NULL
}
model <- create_model(chars, max_length)
source('~/Local Dev Projects/dinozodiac/scripts/tidytextmodel.R', echo=TRUE)
dinoset <- map(
seq(1, length(scopes_text) - max_length -1, by = 3),
~list(sentence = scopes_text[.x:(.x + max_length - 1)],
next_char = scopes_text[.x + max_length])
)
